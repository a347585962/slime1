import org.apache.tools.ant.taskdefs.condition.Os

apply plugin: 'com.android.application'

android {
    compileSdkVersion PROP_COMPILE_SDK_VERSION.toInteger()
    buildToolsVersion PROP_BUILD_TOOLS_VERSION

    defaultConfig {
        applicationId "org.cocos2d.helloworld"
        minSdkVersion PROP_MIN_SDK_VERSION
        targetSdkVersion PROP_TARGET_SDK_VERSION
        versionCode 1
        versionName "1.0"
        multiDexEnabled true
        flavorDimensions "default"

        externalNativeBuild {
            ndkBuild {
                if (!project.hasProperty("PROP_NDK_MODE") || PROP_NDK_MODE.compareTo('none') != 0) {
                    // skip the NDK Build step if PROP_NDK_MODE is none
                    targets 'cocos2djs'
                    arguments 'NDK_TOOLCHAIN_VERSION=clang'
                    
                    def module_paths = [project.file("/Applications/CocosCreator.app/Contents/Resources/cocos2d-x"),
                                        project.file("/Applications/CocosCreator.app/Contents/Resources/cocos2d-x/cocos"),
                                        project.file("/Applications/CocosCreator.app/Contents/Resources/cocos2d-x/external")]
                    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                        arguments 'NDK_MODULE_PATH=' + module_paths.join(";")
                    }
                    else {
                        arguments 'NDK_MODULE_PATH=' + module_paths.join(':')
                    }

                    arguments '-j' + Runtime.runtime.availableProcessors()
                    abiFilters.addAll(PROP_APP_ABI.split(':').collect{it as String})
                }
            }
        }
    }

    productFlavors {
        GOOGLEPLAY {
            applicationId "com.kidskitchenfun.android_trendyfluffyslime"
            versionCode 10
            versionName "1.0"
            manifestPlaceholders = [
                    PlatformCode: "GOOGLEPLAY",
                    Flurry_Key: "",
                    APP_ID: "ca-app-pub-7460046499845066~9467762847",
                    PhoneBanner: "ca-app-pub-7460046499845066/6309641685",
                    PhoneInterstitial: "ca-app-pub-7460046499845066/4629249571",
                    PadBanner: "ca-app-pub-7460046499845066/6309641685",
                    PadInterstitia: "ca-app-pub-7460046499845066/4629249571",
                    CrosspromotionAppID: "5b45a8c9ecfb670c8149da9e",
                    CrosspromotionSignature: "5300804ed18357a6596a6cfbaddb8fd6eac9aaef",
                    RewardedAppID: "ca-app-pub-7460046499845066/1057315005",
                    RewardedSignature: "ca-app-pub-7460046499845066/1057315005",
                    GoogleAnalytics_trackerID: "",
                    Quantcast_API_Key: "",
                    MoreGamePage: "https://play.google.com/store/apps/developer?id=Crazy+Camp+Media"
            ]
        }
    }
    sourceSets.main {
        java.srcDir "src"
        res.srcDir "res"
        jniLibs.srcDir "libs"
        manifest.srcFile "AndroidManifest.xml"
    }

    externalNativeBuild {
        ndkBuild {
            if (!project.hasProperty("PROP_NDK_MODE") || PROP_NDK_MODE.compareTo('none') != 0) {
                // skip the NDK Build step if PROP_NDK_MODE is none
                path "jni/Android.mk"
            }
        }
    }

    signingConfigs {

       release {
            if (project.hasProperty("RELEASE_STORE_FILE")) {
                storeFile file(RELEASE_STORE_FILE)
                storePassword RELEASE_STORE_PASSWORD
                keyAlias RELEASE_KEY_ALIAS
                keyPassword RELEASE_KEY_PASSWORD
            }
        }
    }

    buildTypes {
        release {
            debuggable false
            jniDebuggable false
            renderscriptDebuggable false
//            minifyEnabled true
//            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            if (project.hasProperty("RELEASE_STORE_FILE")) {
                signingConfig signingConfigs.release
            }

            externalNativeBuild {
                ndkBuild {
                    arguments 'NDK_DEBUG=0'
                }
            }
        }

        debug {
            debuggable true
            jniDebuggable true
            renderscriptDebuggable true
            externalNativeBuild {
                ndkBuild {
                    arguments 'NDK_DEBUG=1'
                }
            }
        }
    }
}

android.applicationVariants.all { variant ->
    // delete previous files first
    delete "${buildDir}/intermediates/merged_assets/${variant.dirName}"

    variant.mergeAssets.doLast {
        def sourceDir = "${buildDir}/../../../../.."

        copy {
            from "${sourceDir}/res"
            into "${outputDir}/res"
        }

        copy {
            from "${sourceDir}/subpackages"
            into "${outputDir}/subpackages"
        }

        copy {
            from "${sourceDir}/src"
            into "${outputDir}/src"
        }

        copy {
            from "${sourceDir}/jsb-adapter"
            into "${outputDir}/jsb-adapter"
        }

        copy {
            from "${sourceDir}/main.js"
            from "${sourceDir}/project.json"
            into outputDir
        }
    }
}

dependencies {
//    implementation fileTree(dir: 'libs', include: ['*.jar','*.aar'])
//    implementation fileTree(dir: "/Applications/CocosCreator.app/Contents/Resources/cocos2d-x/cocos/platform/android/java/libs", include: ['*.jar'])
//    implementation project(':libcocos2dx')
    implementation(name: 'newcocos2dx', ext: 'aar')
    implementation(name: 'ads/ads', ext: 'aar')
    implementation(name: 'lib_component/component', ext: 'aar')
////    implementation project(path: ':newcocos2dx_2.20')
    implementation 'com.android.support:appcompat-v7:23.0.0'
    implementation 'com.google.android.gms:play-services-ads:18.3.0'
    implementation "com.android.support:multidex:1.0.0"
//    implementation 'androidx.appcompat:appcompat:1.0.2'
//    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
}

repositories {
    google()
}
